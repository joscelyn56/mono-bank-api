/**
 * @description Module dependencies
 */
import { Request, Response, NextFunction } from 'express'
import { validationResult } from 'express-validator'

/**
 * Transforms response to a specific format
 * @param responseCode 
 * @param responseText 
 * @param payload 
 */
function transformResponse(responseCode: number, responseText: string, payload: {}) {
  if (!payload) {
      payload = {};
  }

  return {
      responseCode: responseCode,
      responseText: responseText,
      payload: payload
  };
}

/**
*
* @param errors {Array}
* @returns {string}
* @description transforms errors generated by express validator to a single message string with each message separated by '|'
*/
function transformExpressValidationErrors(errors: any) {
  if (!Array.isArray(errors))
      return '';

  return errors.map(i => { return i.msg }).join('|');
}

/**
 * @param req {request object}
 * @param res {response object}
 * @returns {response object} | boolean
 */

 function validateRequest(req : Request, res : Response){
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
        let msg = transformExpressValidationErrors(errors.array());
        return res.status(400).json(transformResponse(0, msg, errors.mapped()));
    }

    return false
 }

export { transformResponse, transformExpressValidationErrors, validateRequest };